// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: models.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createModel = `-- name: CreateModel :one
INSERT INTO models (
  user_id,
  name,
  description,
  model_type,
  file_path
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, name, description, model_type, file_path, created_at
`

type CreateModelParams struct {
	UserID      pgtype.Int4 `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ModelType   pgtype.Text `json:"model_type"`
	FilePath    string      `json:"file_path"`
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, createModel,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.ModelType,
		arg.FilePath,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ModelType,
		&i.FilePath,
		&i.CreatedAt,
	)
	return i, err
}

const deleteModel = `-- name: DeleteModel :exec
DELETE FROM models
WHERE id = $1
`

func (q *Queries) DeleteModel(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteModel, id)
	return err
}

const getModel = `-- name: GetModel :one
SELECT id, user_id, name, description, model_type, file_path, created_at FROM models
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetModel(ctx context.Context, id int32) (Model, error) {
	row := q.db.QueryRow(ctx, getModel, id)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ModelType,
		&i.FilePath,
		&i.CreatedAt,
	)
	return i, err
}

const listModels = `-- name: ListModels :many
SELECT id, user_id, name, description, model_type, file_path, created_at FROM models
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListModelsParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListModels(ctx context.Context, arg ListModelsParams) ([]Model, error) {
	rows, err := q.db.Query(ctx, listModels, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.ModelType,
			&i.FilePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModel = `-- name: UpdateModel :one
UPDATE models
  SET name = $2,
      description = $3,
      model_type = $4,
      file_path = $5
WHERE id = $1
RETURNING id, user_id, name, description, model_type, file_path, created_at
`

type UpdateModelParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	ModelType   pgtype.Text `json:"model_type"`
	FilePath    string      `json:"file_path"`
}

func (q *Queries) UpdateModel(ctx context.Context, arg UpdateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, updateModel,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ModelType,
		arg.FilePath,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ModelType,
		&i.FilePath,
		&i.CreatedAt,
	)
	return i, err
}
