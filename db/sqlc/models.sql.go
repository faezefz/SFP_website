// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: models.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createModel = `-- name: CreateModel :one
INSERT INTO models (user_id, name, description, file_path)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, name, description, model_type, file_path, created_at
`

type CreateModelParams struct {
	UserID      pgtype.Int4 `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	FilePath    string      `json:"file_path"`
}

func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, createModel,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.FilePath,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ModelType,
		&i.FilePath,
		&i.CreatedAt,
	)
	return i, err
}

const deleteModel = `-- name: DeleteModel :exec
DELETE FROM models WHERE id = $1
`

func (q *Queries) DeleteModel(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteModel, id)
	return err
}

const getModelByID = `-- name: GetModelByID :one
SELECT id, user_id, name, description, model_type, file_path, created_at FROM models WHERE id = $1 LIMIT 1
`

func (q *Queries) GetModelByID(ctx context.Context, id int32) (Model, error) {
	row := q.db.QueryRow(ctx, getModelByID, id)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ModelType,
		&i.FilePath,
		&i.CreatedAt,
	)
	return i, err
}

const getModelsByUserID = `-- name: GetModelsByUserID :many
SELECT id, user_id, name, description, model_type, file_path, created_at FROM models WHERE user_id = $1 ORDER BY id
`

func (q *Queries) GetModelsByUserID(ctx context.Context, userID pgtype.Int4) ([]Model, error) {
	rows, err := q.db.Query(ctx, getModelsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.ModelType,
			&i.FilePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateModel = `-- name: UpdateModel :one
UPDATE models
SET name = $2,
    description = $3,
    file_path = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, description, model_type, file_path, created_at
`

type UpdateModelParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	FilePath    string      `json:"file_path"`
}

func (q *Queries) UpdateModel(ctx context.Context, arg UpdateModelParams) (Model, error) {
	row := q.db.QueryRow(ctx, updateModel,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.FilePath,
	)
	var i Model
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ModelType,
		&i.FilePath,
		&i.CreatedAt,
	)
	return i, err
}
