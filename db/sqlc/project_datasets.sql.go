// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_datasets.sql

package db

import (
	"context"
)

const addDatasetToProject = `-- name: AddDatasetToProject :exec
INSERT INTO project_datasets (project_id, dataset_id)
VALUES ($1, $2)
`

type AddDatasetToProjectParams struct {
	ProjectID int32 `json:"project_id"`
	DatasetID int32 `json:"dataset_id"`
}

func (q *Queries) AddDatasetToProject(ctx context.Context, arg AddDatasetToProjectParams) error {
	_, err := q.db.Exec(ctx, addDatasetToProject, arg.ProjectID, arg.DatasetID)
	return err
}

const getDatasetsByProjectID = `-- name: GetDatasetsByProjectID :many
SELECT d.id, d.user_id, d.name, d.description, d.file_path, d.uploaded_at
FROM datasets d
JOIN project_datasets pd ON d.id = pd.dataset_id
WHERE pd.project_id = $1
`

func (q *Queries) GetDatasetsByProjectID(ctx context.Context, projectID int32) ([]Dataset, error) {
	rows, err := q.db.Query(ctx, getDatasetsByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.FilePath,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDatasetFromProject = `-- name: RemoveDatasetFromProject :exec
DELETE FROM project_datasets
WHERE project_id = $1 AND dataset_id = $2
`

type RemoveDatasetFromProjectParams struct {
	ProjectID int32 `json:"project_id"`
	DatasetID int32 `json:"dataset_id"`
}

func (q *Queries) RemoveDatasetFromProject(ctx context.Context, arg RemoveDatasetFromProjectParams) error {
	_, err := q.db.Exec(ctx, removeDatasetFromProject, arg.ProjectID, arg.DatasetID)
	return err
}
