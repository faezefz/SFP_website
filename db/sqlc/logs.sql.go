// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (user_id, project_id, action, details)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, project_id, action, details, created_at
`

type CreateLogParams struct {
	UserID    pgtype.Int4 `json:"user_id"`
	ProjectID pgtype.Int4 `json:"project_id"`
	Action    pgtype.Text `json:"action"`
	Details   pgtype.Text `json:"details"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRow(ctx, createLog,
		arg.UserID,
		arg.ProjectID,
		arg.Action,
		arg.Details,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProjectID,
		&i.Action,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLog = `-- name: DeleteLog :exec
DELETE FROM logs WHERE id = $1
`

func (q *Queries) DeleteLog(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLog, id)
	return err
}

const getLogByID = `-- name: GetLogByID :one
SELECT id, user_id, project_id, action, details, created_at FROM logs WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLogByID(ctx context.Context, id int32) (Log, error) {
	row := q.db.QueryRow(ctx, getLogByID, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProjectID,
		&i.Action,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}

const getLogsByProjectOrUser = `-- name: GetLogsByProjectOrUser :many
SELECT id, user_id, project_id, action, details, created_at FROM logs
WHERE project_id = $1 OR user_id = $2
ORDER BY created_at DESC
`

type GetLogsByProjectOrUserParams struct {
	ProjectID pgtype.Int4 `json:"project_id"`
	UserID    pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetLogsByProjectOrUser(ctx context.Context, arg GetLogsByProjectOrUserParams) ([]Log, error) {
	rows, err := q.db.Query(ctx, getLogsByProjectOrUser, arg.ProjectID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProjectID,
			&i.Action,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
