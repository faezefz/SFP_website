// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_models.sql

package db

import (
	"context"
)

const addModelToProject = `-- name: AddModelToProject :exec
INSERT INTO project_models (project_id, model_id)
VALUES ($1, $2)
`

type AddModelToProjectParams struct {
	ProjectID int32 `json:"project_id"`
	ModelID   int32 `json:"model_id"`
}

func (q *Queries) AddModelToProject(ctx context.Context, arg AddModelToProjectParams) error {
	_, err := q.db.Exec(ctx, addModelToProject, arg.ProjectID, arg.ModelID)
	return err
}

const getModelsByProjectID = `-- name: GetModelsByProjectID :many
SELECT m.id, m.user_id, m.name, m.description, m.model_type, m.file_path, m.created_at
FROM models m
JOIN project_models pm ON m.id = pm.model_id
WHERE pm.project_id = $1
`

func (q *Queries) GetModelsByProjectID(ctx context.Context, projectID int32) ([]Model, error) {
	rows, err := q.db.Query(ctx, getModelsByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.ModelType,
			&i.FilePath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeModelFromProject = `-- name: RemoveModelFromProject :exec
DELETE FROM project_models
WHERE project_id = $1 AND model_id = $2
`

type RemoveModelFromProjectParams struct {
	ProjectID int32 `json:"project_id"`
	ModelID   int32 `json:"model_id"`
}

func (q *Queries) RemoveModelFromProject(ctx context.Context, arg RemoveModelFromProjectParams) error {
	_, err := q.db.Exec(ctx, removeModelFromProject, arg.ProjectID, arg.ModelID)
	return err
}
