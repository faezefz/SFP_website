// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: predictions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPrediction = `-- name: CreatePrediction :one
INSERT INTO predictions (
  user_id,
  dataset_id,
  model_id,
  result_file_path,
  status
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, dataset_id, model_id, result_file_path, status, created_at
`

type CreatePredictionParams struct {
	UserID         pgtype.Int4 `json:"user_id"`
	DatasetID      pgtype.Int4 `json:"dataset_id"`
	ModelID        pgtype.Int4 `json:"model_id"`
	ResultFilePath pgtype.Text `json:"result_file_path"`
	Status         pgtype.Text `json:"status"`
}

func (q *Queries) CreatePrediction(ctx context.Context, arg CreatePredictionParams) (Prediction, error) {
	row := q.db.QueryRow(ctx, createPrediction,
		arg.UserID,
		arg.DatasetID,
		arg.ModelID,
		arg.ResultFilePath,
		arg.Status,
	)
	var i Prediction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DatasetID,
		&i.ModelID,
		&i.ResultFilePath,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deletePrediction = `-- name: DeletePrediction :exec
DELETE FROM predictions
WHERE id = $1
`

func (q *Queries) DeletePrediction(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePrediction, id)
	return err
}

const getPrediction = `-- name: GetPrediction :one
SELECT id, user_id, dataset_id, model_id, result_file_path, status, created_at FROM predictions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPrediction(ctx context.Context, id int32) (Prediction, error) {
	row := q.db.QueryRow(ctx, getPrediction, id)
	var i Prediction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DatasetID,
		&i.ModelID,
		&i.ResultFilePath,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listPredictions = `-- name: ListPredictions :many
SELECT id, user_id, dataset_id, model_id, result_file_path, status, created_at FROM predictions
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPredictionsParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListPredictions(ctx context.Context, arg ListPredictionsParams) ([]Prediction, error) {
	rows, err := q.db.Query(ctx, listPredictions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prediction
	for rows.Next() {
		var i Prediction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DatasetID,
			&i.ModelID,
			&i.ResultFilePath,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrediction = `-- name: UpdatePrediction :one
UPDATE predictions
  SET result_file_path = $2,
      status = $3
WHERE id = $1
RETURNING id, user_id, dataset_id, model_id, result_file_path, status, created_at
`

type UpdatePredictionParams struct {
	ID             int32       `json:"id"`
	ResultFilePath pgtype.Text `json:"result_file_path"`
	Status         pgtype.Text `json:"status"`
}

func (q *Queries) UpdatePrediction(ctx context.Context, arg UpdatePredictionParams) (Prediction, error) {
	row := q.db.QueryRow(ctx, updatePrediction, arg.ID, arg.ResultFilePath, arg.Status)
	var i Prediction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DatasetID,
		&i.ModelID,
		&i.ResultFilePath,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
