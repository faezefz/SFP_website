// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (owner_user_id, name, description, visibility)
VALUES ($1, $2, $3, COALESCE($4, 'private'))
RETURNING id, owner_user_id, name, description, visibility, created_at
`

type CreateProjectParams struct {
	OwnerUserID int32       `json:"owner_user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Column4     interface{} `json:"column_4"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.OwnerUserID,
		arg.Name,
		arg.Description,
		arg.Column4,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OwnerUserID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, owner_user_id, name, description, visibility, created_at FROM projects WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OwnerUserID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
	)
	return i, err
}

const listProjectsByOwner = `-- name: ListProjectsByOwner :many
SELECT id, owner_user_id, name, description, visibility, created_at FROM projects
WHERE owner_user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProjectsByOwnerParams struct {
	OwnerUserID int32 `json:"owner_user_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListProjectsByOwner(ctx context.Context, arg ListProjectsByOwnerParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjectsByOwner, arg.OwnerUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.OwnerUserID,
			&i.Name,
			&i.Description,
			&i.Visibility,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = COALESCE($2, name),
    description = COALESCE($3, description),
    visibility = COALESCE($4, visibility)
WHERE id = $1
RETURNING id, owner_user_id, name, description, visibility, created_at
`

type UpdateProjectParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Visibility  pgtype.Text `json:"visibility"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Visibility,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OwnerUserID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
	)
	return i, err
}
