// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (owner_user_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, owner_user_id, name, description, visibility, created_at
`

type CreateProjectParams struct {
	OwnerUserID int32       `json:"owner_user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.OwnerUserID, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OwnerUserID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, owner_user_id, name, description, visibility, created_at FROM projects WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OwnerUserID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
	)
	return i, err
}

const getProjectsByOwnerID = `-- name: GetProjectsByOwnerID :many
SELECT id, owner_user_id, name, description, visibility, created_at FROM projects WHERE owner_user_id = $1 ORDER BY id
`

func (q *Queries) GetProjectsByOwnerID(ctx context.Context, ownerUserID int32) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjectsByOwnerID, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.OwnerUserID,
			&i.Name,
			&i.Description,
			&i.Visibility,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = $2,
    description = $3
WHERE id = $1
RETURNING id, owner_user_id, name, description, visibility, created_at
`

type UpdateProjectParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.ID, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.OwnerUserID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
	)
	return i, err
}
