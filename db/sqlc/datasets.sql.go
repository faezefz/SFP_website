// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: datasets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDataset = `-- name: CreateDataset :one
INSERT INTO datasets (user_id, name, description, content)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, name, description, content, uploaded_at
`

type CreateDatasetParams struct {
	UserID      pgtype.Int4 `json:"user_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Content     []byte      `json:"content"`
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, createDataset,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Content,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.UploadedAt,
	)
	return i, err
}

const deleteDataset = `-- name: DeleteDataset :exec
DELETE FROM datasets WHERE id = $1
`

func (q *Queries) DeleteDataset(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteDataset, id)
	return err
}

const getDatasetByID = `-- name: GetDatasetByID :one
SELECT id, user_id, name, description, content, uploaded_at FROM datasets WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDatasetByID(ctx context.Context, id int32) (Dataset, error) {
	row := q.db.QueryRow(ctx, getDatasetByID, id)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.UploadedAt,
	)
	return i, err
}

const getDatasetsByUserID = `-- name: GetDatasetsByUserID :many
SELECT id, user_id, name, description, content, uploaded_at FROM datasets WHERE user_id = $1 ORDER BY id
`

func (q *Queries) GetDatasetsByUserID(ctx context.Context, userID pgtype.Int4) ([]Dataset, error) {
	rows, err := q.db.Query(ctx, getDatasetsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Dataset
	for rows.Next() {
		var i Dataset
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.Content,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDataset = `-- name: UpdateDataset :one
UPDATE datasets
SET name = $2,
    description = $3,
    content = $4
WHERE id = $1
RETURNING id, user_id, name, description, content, uploaded_at
`

type UpdateDatasetParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Content     []byte      `json:"content"`
}

func (q *Queries) UpdateDataset(ctx context.Context, arg UpdateDatasetParams) (Dataset, error) {
	row := q.db.QueryRow(ctx, updateDataset,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Content,
	)
	var i Dataset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.UploadedAt,
	)
	return i, err
}
